/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Amy Zhang
 * Date: October 16, 2023
 * 
 */
import java.io.*;
import java.util.*;
        
public class Battlefield extends javax.swing.JFrame {

    boolean easyMode = false, questionMode = false, isEnd = false;;
    int userHealth = 100, compHealth = 100, questionIndex = -1;
    String userGuess;
    
    // store questions and answers (including options)
    ArrayList<String> questions = new ArrayList<>();
    ArrayList<ArrayList<String>> answers = new ArrayList<>();
    
    /**
     * Creates new form CustomMethods
     */
    public Battlefield() {
        initComponents();
        
        //nothing except textarea is visible
        btnSkip.setVisible(false);
        btnToOptions.setVisible(false);
        btnSubmit.setVisible(false);
        txtGuess.setVisible(false);
        comboOptions.setVisible(false);
        questionMode = true;
        
        //adding questions data to arrays
        try{
            Scanner readFile = new Scanner(new File(this.getClass().getResource("Questions.csv").getFile()));

            int line = 0;
            while (readFile.hasNextLine()){
                //new scanner to read each line
                Scanner readLine = new Scanner(readFile.nextLine());
                readLine.useDelimiter(",");
                
                //storing values of a line
                questions.add(readLine.next());
                ArrayList<String> currentAnswers = new ArrayList<>();
                for (int i = 0; i < 4; i++){
                    currentAnswers.add(readLine.next());
                }
                answers.add(currentAnswers);
                line++;
            }
            readFile.close();
        } catch (IOException e) {
            System.out.println("No Questions.csv file found");
            e.printStackTrace();
        }
    }
    
    public static int damage (int bound){
        Random rand = new Random();
        int damage = rand.nextInt(bound);
        
        if (damage == 0) {
            //say it missed
            return 0;
        }
        if (damage == bound - 1){
            //say critical hit
            return bound + 3;
        }
        return damage;
    }
    
    public void updateHealth(){
        compHealthBar.setValue(compHealth);
        userHealthBar.setValue(userHealth);
    }
    
    public void changeQMode(){
        if (questionMode){
            btnArrow.setVisible(false);
            btnSubmit.setVisible(true);
            
            btnSkip.setVisible(true);
            btnToOptions.setVisible(true);
            txtGuess.setVisible(true);
            comboOptions.setVisible(false);
            
            questionMode = false;
            
        } else { //showing answer and damage
            btnArrow.setVisible(true);
            btnSubmit.setVisible(false);
            
            btnToOptions.setVisible(false);
            btnToOptions.setSelected(false);
            btnToOptions.setEnabled(true);
            easyMode = false;
            
            btnSkip.setVisible(false);
            txtGuess.setVisible(false);
            txtGuess.setText("");
            comboOptions.setVisible(false);
            
            questionMode = true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jSlider1 = new javax.swing.JSlider();
        jSpinner1 = new javax.swing.JSpinner();
        jTextField1 = new javax.swing.JTextField();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        userHealthBar = new javax.swing.JProgressBar();
        btnArrow = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        compHealthBar = new javax.swing.JProgressBar();
        comboOptions = new javax.swing.JComboBox<>();
        btnSkip = new javax.swing.JButton();
        txtGuess = new javax.swing.JTextField();
        btnToOptions = new javax.swing.JToggleButton();
        lblCompImage = new javax.swing.JLabel();
        lblUserImage = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();

        jScrollPane1.setViewportView(jTextPane1);

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userHealthBar.setBackground(new java.awt.Color(242, 242, 242));
        userHealthBar.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        userHealthBar.setForeground(new java.awt.Color(255, 255, 255));
        userHealthBar.setValue(100);
        userHealthBar.setStringPainted(true);

        btnArrow.setBackground(javax.swing.UIManager.getDefaults().getColor("Label.background"));
        btnArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-arrow-right-24.png"))); // NOI18N
        btnArrow.setBorderPainted(false);
        btnArrow.setIconTextGap(0);
        btnArrow.setPreferredSize(new java.awt.Dimension(40, 50));
        btnArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArrowActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Papyrus", 1, 36)); // NOI18N
        lblTitle.setText("Battle");

        txtOutput.setEditable(false);
        txtOutput.setColumns(20);
        txtOutput.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        txtOutput.setLineWrap(true);
        txtOutput.setRows(5);
        txtOutput.setText("Welcome to the battle field!\n===\nAnswer questions correctly and defeat Chikorita. \nBeware that the multiple choice is easier, but less powerful.\n===\nClick the arrow button to continue.");
        jScrollPane3.setViewportView(txtOutput);

        compHealthBar.setBackground(new java.awt.Color(242, 242, 242));
        compHealthBar.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        compHealthBar.setForeground(new java.awt.Color(255, 255, 255));
        compHealthBar.setValue(100);
        compHealthBar.setStringPainted(true);

        comboOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSkip.setText("Don't know");
        btnSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkipActionPerformed(evt);
            }
        });

        btnToOptions.setText("Multiple Choice");
        btnToOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToOptionsActionPerformed(evt);
            }
        });

        lblCompImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/chikorita.png"))); // NOI18N

        lblUserImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pikachu-color.png"))); // NOI18N

        btnSubmit.setText("Submit");
        btnSubmit.setIconTextGap(0);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnToOptions)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGuess, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSkip)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSubmit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnArrow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUserImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCompImage, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(compHealthBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(193, 193, 193))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(compHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblCompImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblUserImage)
                        .addGap(18, 18, 18)
                        .addComponent(userHealthBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)))
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtGuess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSkip)
                    .addComponent(btnToOptions))
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArrowActionPerformed
        Random rand = new Random();
        
        if (compHealth <= 0 || userHealth <= 0) {
            if (compHealth <= 0) {
                txtOutput.setText("Congrats! You have defeated Chikorita");
            } else {
                txtOutput.setText("Oh no! You have been defeated by Chikorita");
            }
            txtOutput.append("\n==="
                    + "\nClick the arrow button to return to the main menu");

            //If second time pressed
            if (isEnd == true){
                this.dispose();
                new MainMenu().setVisible(true);
            }
            isEnd = true;
            
        } else {
            int lastQuestionIndex = questionIndex;
            do{
                questionIndex = rand.nextInt(questions.size());
            } while (questionIndex == lastQuestionIndex && questions.size() != 1);
            
            //display next question
            txtOutput.setText(questions.get(questionIndex));
            changeQMode();
        }
    }//GEN-LAST:event_btnArrowActionPerformed

    private void btnSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkipActionPerformed
        int damageDone;
        
        if (easyMode) {
            damageDone = damage(7);
        } else {
            damageDone = damage(12);
        }
        //show answer
        txtOutput.append("\n==="
                + "\nThe correct answer was: " + answers.get(questionIndex).get(0)
                + "\n==="
                + "\nYou missed. The opponent dealt " + damageDone + " damage.");
        userHealth -= damageDone;
        
        updateHealth();
        changeQMode();
    }//GEN-LAST:event_btnSkipActionPerformed

    private void btnToOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToOptionsActionPerformed
        if (btnToOptions.isSelected()){         
            //switch to easy mode
            comboOptions.setVisible(true);
            txtGuess.setVisible(false);
            btnToOptions.setEnabled(false);
            easyMode = true;   
            
            //change options
            comboOptions.removeAllItems();
            //make options randomized
            ArrayList<String> shuffledOptions = new ArrayList<>();
            for (String option : answers.get(questionIndex)) {
                shuffledOptions.add(option);
            }
            Collections.shuffle(shuffledOptions);
            //add options
            for (String option : shuffledOptions) {
                comboOptions.addItem(option);
            }
            
        } 
    }//GEN-LAST:event_btnToOptionsActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        //check which mode (easy/normal)
        if (easyMode){
            userGuess = String.valueOf(comboOptions.getSelectedItem());
            // try except if nothing is selected
        } else {
            userGuess = txtGuess.getText().toLowerCase();
        }

        //dealing damage
        int damageDone;
        if (easyMode){
            damageDone = damage(7);
        } else {
            damageDone = damage(12);
        }   
        if (userGuess.equals(answers.get(questionIndex).get(0))){

            txtOutput.append("\n==="
                + "\nThat was correct!"
                + "\n===\n");
            
            if (damageDone == 0) damageDone = 1;
     
            compHealth -= damageDone;       
            txtOutput.append("Pikachu dealt " + damageDone + " damage. ");
                
            //comp damaging
            if (easyMode){
                damageDone = damage(7);
            } else {
                damageDone = damage(12); 
            }
            userHealth -= damageDone;

            if (damageDone != 0) {
                 txtOutput.append("The opponent dealt " + damageDone + " damage.");
            } else {
                 txtOutput.append("The opponent missed");
            }
            
        } else {
            userHealth -= damageDone;
            txtOutput.append("\n==="
                + "\nThe correct answer was: " + answers.get(questionIndex).get(0)
                + "\n==="
                + "\nYou missed.");
            
            if (damageDone != 0) {
                 txtOutput.append("The opponent dealt " + damageDone + " damage.");
            } else {
                 txtOutput.append("The opponent also missed");
            }
        }

        //display question results
        
        
        updateHealth();
        changeQMode();
    }//GEN-LAST:event_btnSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Battlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Battlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Battlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Battlefield.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Battlefield().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArrow;
    private javax.swing.JButton btnSkip;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JToggleButton btnToOptions;
    private javax.swing.JComboBox<String> comboOptions;
    private javax.swing.JProgressBar compHealthBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JLabel lblCompImage;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUserImage;
    private javax.swing.JTextField txtGuess;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JProgressBar userHealthBar;
    // End of variables declaration//GEN-END:variables
}
